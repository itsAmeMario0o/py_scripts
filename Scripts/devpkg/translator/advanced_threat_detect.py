'''
Created on Aug 27, 2013

@author: tsnguyen
'''


from translator.state_type import State, Type
from translator.base.dmobject import DMObject
from translator.base.simpletype import SimpleType
import utils.util as util
import asaio.cli_interaction as cli_interaction
from asaio.cli_interaction import CLIInteraction


class AdvancedThreatDetection(DMObject):
    '''
    Advanced Thread Detection
    Supports the following CLI:

    threat-detection statistics
    threat-detection statistics access-list
    threat-detection statistics host [number-of-rate {1 | 2 | 3}]
    threat-detection statistics port [number-of-rate {1 | 2 | 3}]
    threat-detection statistics protocol [number-of-rate {1 | 2 | 3}]

    threat-detection statistics tcp-intercept [rate-interval minutes]
        [burst-rate attacks_per_sec]
        [average-rate attacks_per_sec]
    '''

    THREAT_DETECTION_STATISTICS = "threat-detection statistics"
    THREAT_DETECTION_STATISTICS_TCP_INTERCEPT = "threat-detection statistics tcp-intercept"
    THREAT_DETECTION_STATISTICS_ACCESS_LIST = "threat-detection statistics access-list"


    statistics = {}

    def __init__(self):
        '''
        Constructor
        '''
        DMObject.__init__(self, AdvancedThreatDetection.__name__)

        self.has_device = False
        translator = SimpleAccessList("access_list", self.THREAT_DETECTION_STATISTICS_ACCESS_LIST, on_value="enable",
                            response_parser=cli_interaction.ignore_warning_response_parser)
        self.register_child(translator)

        for opt in ['host', 'port', 'protocol']:
            translator = NumberOfRateOption('AdvancedThreatDetection' + opt.title(), self.THREAT_DETECTION_STATISTICS + ' ' + opt)
            self.register_child(translator)

        translator = TcpIntercept('AdvancedThreatDetectionTcpIntercept', self.THREAT_DETECTION_STATISTICS_TCP_INTERCEPT)
        self.register_child(translator)

        translator = SimpleStatistics("statistics", self.THREAT_DETECTION_STATISTICS, on_value="enable",
                            response_parser=cli_interaction.ignore_warning_response_parser)
        self.register_child(translator)

    def is_audit(self):

        ''' Check if it is audit '''
        if not self.get_top().delta_ifc_cfg_value:
            return False

        return self.get_top().delta_ifc_cfg_value.get('state') != State.NOCHANGE

    @classmethod
    def statistics_exists(cls, stat_type):
        ''' Check if statistics already exists'''

        value =  cls.statistics.get(stat_type)
        return True if value and value != 'disable' else False

    def query_adv_threat(self):
        ''' Get all advanced threat statistics on the device.
        These are used  to optimize the CLI so that no unnecessary CLIs are generated by audit function
        '''

        if not self.get_top().get_device(): #skip if there is no device attribute
            return

        self.has_device = True
        AdvancedThreatDetection.statistics = {}

        query_cmd = 'show run all threat-detection | grep statistics'
        res = self.query_asa(query_cmd)

        if not res or not len(res):
            return

        lines = res.split('\n')
        for cli in lines:
            if cli.endswith('threat-detection statistics access-list'):
                AdvancedThreatDetection.statistics['access-list'] = 'enable' if not cli.startswith('no ') else 'disable'
            elif cli == 'threat-detection statistics':
                AdvancedThreatDetection.statistics['statistics'] = ''



    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        self.query_adv_threat()
        super(AdvancedThreatDetection, self).ifc2asa(no_asa_cfg_stack, asa_cfg_list)



    def __repr__(self):
        return "Advanced Threat Detection"

class SimpleStatistics(SimpleType):
    ''' Translator for the type of CLI that turns on/off statistics
    threat-detection statistics
    '''
    def __init__(self, ifc_key, asa_key, on_value, response_parser):
        '''
        @param on_value: str
            The value in the dictionary to turn on the feature, e.g. 'enable'
        '''
        SimpleType.__init__(self, ifc_key, asa_key)
        self.on_value = on_value
        self.response_parser = response_parser

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']


        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if cli:
                if cli.startswith('no '):
                    no_asa_cfg_stack.append(CLIInteraction(cli))
                else:
                    asa_cfg_list.append(CLIInteraction(cli))


    def create_cli(self, config, state):
        ''' Create the CLI using the config and the state '''

        if not config:
            return None

        if state == State.NOCHANGE:
            return None

        if config != 'enable' and config != 'disable':
            return None
        if state == State.CREATE:
            if self.parent.is_audit():
                if self.parent.statistics_exists('statistics'):
                    return None
        if state == State.DESTROY:
            return 'no ' + self.asa_key
        if str(config).startswith('disable'):
            return 'no ' + self.asa_key
        return self.asa_key

    def get_cli(self):
        '''Override get_cli'''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        if config == 'enable' or config == 'disable':
            return self.create_cli(config, self.get_action())

        return None

    def parse_cli(self, cli):
        '''Override parse_cli'''

        if cli.endswith('threat-detection statistics'):
            return 'disable' if cli.startswith('no') else self.on_value
        return SimpleType.parse_cli(self, cli)

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.endswith(AdvancedThreatDetection.THREAT_DETECTION_STATISTICS)
    
class SimpleAccessList(SimpleType):
    ''' Translator for the type of CLI that turns on/off statistics access-list
    threat-detection statistics access-list
    '''
    def __init__(self, ifc_key, asa_key, on_value, response_parser):
        '''
        @param on_value: str
            The value in the dictionary to turn on the feature, e.g. 'enable'
        '''
        SimpleType.__init__(self, ifc_key = ifc_key, asa_key = asa_key)
        self.on_value = on_value
        self.response_parser = response_parser

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']


        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if cli:
                if cli.startswith('no '):
                    no_asa_cfg_stack.append(CLIInteraction(cli))
                else:
                    asa_cfg_list.append(CLIInteraction(cli))

    def create_cli(self, config, state):
        ''' Create the CLI using the config and the state '''


        if not config:
            return None
        if config != 'enable' and config != 'disable':
            return None
        if state == State.NOCHANGE:
            return None
        if state == State.CREATE:
            if self.parent.is_audit():
                if self.parent.statistics_exists('access-list'):
                    return None
        if state == State.DESTROY:
            return 'no ' + self.asa_key
        if str(config).startswith('disable'):
            return 'no ' + self.asa_key
        return self.asa_key

    def get_cli(self):
        '''Override get_cli'''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())

    def parse_cli(self, cli):
        '''Override parse_cli'''

        if cli.endswith(AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_ACCESS_LIST):
            return 'disable' if cli.startswith('no') else self.on_value
        return SimpleType.parse_cli(self, cli)
    
    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.endswith(AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_ACCESS_LIST)

class NumberOfRateOption(SimpleType):
    ''' Class to support CLI
    threat-detection statistics host [number-of-rate {1 | 2 | 3}]
    threat-detection statistics port [number-of-rate {1 | 2 | 3}]
    threat-detection statistics protocol [number-of-rate {1 | 2 | 3}]
    '''
    def __init__(self, name, asa_key):
        '''Constructor'''
        self.stat_type = name[len('AdvancedThreatDetection'):].lower()
        self.folder_name = name
        SimpleType.__init__(self, name, asa_key,
            response_parser = cli_interaction.ignore_warning_response_parser)

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']


        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if len(cli) > 0:
                if cli.startswith('no '):
                    no_asa_cfg_stack.append(CLIInteraction(cli))
                else:
                    asa_cfg_list.append(CLIInteraction(cli))

    def create_cli(self, config, state):
        ''' Create the CLI using the config and the state '''
        if state == State.NOCHANGE:
            return ''
        if not config:
            return ''

        result = AdvancedThreatDetection.THREAT_DETECTION_STATISTICS

        if state == State.DESTROY:
            if self.parent.is_audit():
                if self.parent.statistics_exists('statistics'):
                    return None
            return 'no ' + AdvancedThreatDetection.THREAT_DETECTION_STATISTICS + ' ' + self.stat_type
        status = 'enable'
        try:
            if isinstance(config, dict):
                status = config.get('status')
            else:
                return ''
        except KeyError:
            return SimpleType.get_cli(self)

        if status and status.startswith('disable'):
            return 'no ' + AdvancedThreatDetection.THREAT_DETECTION_STATISTICS + ' ' + self.stat_type
        result +=  ' ' + self.stat_type

        rate = config.get('number_of_rate')
        if rate:
            result +=  ' number-of-rate ' + str(rate)
        return result

    def get_cli(self):
        '''Generate the CLI for this single config.
        '''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        if not config:
            return None
        return self.create_cli(config, self.get_action())



    def parse_multi_parameter_cli(self, cli, alternate_asa_gen_template = None):
        '''
        Override the default implementation in case the CLI does not match asa_gen_template due to optional parameter
        '''
        # Take care of the mandatory parameters
        result = SimpleType.parse_multi_parameter_cli(self, cli, alternate_asa_gen_template = self.asa_gen_template)

        #Take care of the optional parameters
        tokens = cli.split()

        if tokens[0] == 'no':
            result = {(Type.PARAM, 'status', '') : {'state': State.NOCHANGE, 'value': 'disable'}}
            return result

        # The number of mandatory parameters is 3, i.e. 'threat-detection statistics host'
        if len(tokens) == 3:
            return result # no optional parameter



        option = tokens[3:]
        if 'number-of-rate' in option:
            pos = option.index('number-of-rate') + 1
            result = {(Type.PARAM, 'number_of_rate', '') : {'state': State.NOCHANGE, 'value': option[pos]}}
        else:
            return result

        return result

class TcpIntercept(SimpleType):
    ''' Class to support CLI:
    threat-detection statistics tcp-intercept [rate-interval minutes]
        [burst-rate attacks_per_sec]
        [average-rate attacks_per_sec]
        '''

    def __init__(self, name, asa_key):
        '''Constructor '''
        SimpleType.__init__(self, name, asa_key,
            response_parser = cli_interaction.ignore_warning_response_parser)

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']


        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if len(cli) > 0:
                if cli.startswith('no '):
                    no_asa_cfg_stack.append(CLIInteraction(cli))
                else:
                    asa_cfg_list.append(CLIInteraction(cli))

    def create_cli(self, config, state):
        ''' Create the CLI using the config and the state '''
        if state == State.NOCHANGE:
            return ''
        if not config:
            return ''

        if not isinstance(config, dict):
            if self.has_ifc_delta_cfg() and self.delta_ifc_cfg_value.get('state', None) == State.DESTROY:
                return self.asa_key
            return ''

        if state == State.DESTROY:
            return 'no ' + AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_TCP_INTERCEPT
        status = config.get('status')
        if status and status.startswith('disable'):
            return 'no ' + AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_TCP_INTERCEPT
        rate_interval = config.get('rate_interval')
        burst_rate = config.get('burst_rate')
        average_rate = config.get('average_rate')

        result = AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_TCP_INTERCEPT
        if rate_interval:
            result +=  ' rate-interval ' + str(rate_interval)
        if burst_rate:
            result +=  ' burst-rate ' + str(burst_rate)
        if average_rate:
            result +=  ' average-rate ' + str(average_rate)

        return result

    def get_cli(self):
        '''Generate the CLI for this single config.
        '''
        assert self.has_ifc_delta_cfg()


        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])

        if not config:
            return ''
        if not isinstance(config, dict):
            if self.delta_ifc_cfg_value['state'] == State.DESTROY:
                return self.asa_key
            return ''
        return self.create_cli(config, self.get_action())

    def parse_multi_parameter_cli(self, cli, alternate_asa_gen_template = None):
        '''
        Override the default implementation in case the CLI does not match asa_gen_template due to optional parameter
        '''
        if not cli.endswith(AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_TCP_INTERCEPT):
            return SimpleType.parse_multi_parameter_cli(self, cli, alternate_asa_gen_template)
        return self.parse_intercept_cli(cli)

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.endswith(AdvancedThreatDetection.THREAT_DETECTION_STATISTICS_TCP_INTERCEPT)
    
    @staticmethod
    def get_str(values):
        ''' Get rate string '''
        if 'rate_interval' in values:
            return 'tcp-intercept|' + str(values['rate_interval']) + '|' + str(values['burst_rate']) + '|' + str(values['average_rate'])
        return 'tcp-intercept'

    @staticmethod
    def parse_intercept_cli(cli):
        ''' Parse intercept CLI '''
        #Take care of the optional parameters
        
        tokens = cli.split()
        result = {}

        # The number of mandatory parameters is 3, i.e. 'threat-detection statistics tcp-intercept'
        if len(tokens) == 3:
            return result # no optional parameter

        for name  in ['rate_interval', 'burst_rate', 'average_rate']:
            result[(Type.PARAM, name, '')] = {'state': State.NOCHANGE, 'value': ''}

        option = tokens[3:]
        if 'rate-interval' in option:
            pos = option.index('rate-interval')
            result[Type.PARAM, 'rate_interval', '']['value'] = option[pos + 1]
        if 'burst-rate' in option:
            pos = option.index('burst-rate')
            result[Type.PARAM, 'burst_rate', '']['value'] = option[pos + 1]
        if 'average-rate' in option:
            pos = option.index('average-rate')
            result[Type.PARAM, 'average_rate', '']['value'] = option[pos + 1]
        return result
