'''
Created on Aug 27, 2013

@author: tsnguyen
'''

from translator.state_type import State, Type
from translator.base.dmobject import DMObject
from translator.base.dmlist import DMList
from translator.base.simpletype import SimpleType
import utils.util as util
from asaio.cli_interaction import CLIInteraction
import asaio.cli_interaction as cli_interaction


class BasicThreatDetection(DMObject):
    '''
    Basic Threat Detection
    Supports the following CLI:

    threat-detection basic-threat

    threat-detection rate {acl-drop | bad-packet-drop | conn-limit-drop |
        dos-drop | fw-drop | icmp-drop | inspect-drop | interface-drop |
        scanning-threat | syn-attack} rate-interval rate_interval average-rate
        av_rate burst-rate burst_rate
    '''

    THREAT_DETECTION = "threat-detection"
    RATE_OPTIONS = ['acl-drop', 'bad-packet-drop', 'conn-limit-drop', 'dos-drop', 'fw-drop', 'icmp-drop', 'inspect-drop', 'interface-drop', 'syn-attack']
    rates = {}

    def __init__(self):
        '''
        Constructor
        '''
        DMObject.__init__(self, BasicThreatDetection.__name__)
        self.audit = False
        self.register_child(SimpleBasicThreat("basic_threat", 'threat-detection basic-threat', on_value="enable",
             response_parser=cli_interaction.ignore_warning_response_parser))

        for rate_type in self.RATE_OPTIONS:
            self.register_child(BasicThreatRateList('BasicThreatDetectionRate' + self.to_camel_case(rate_type), BasicThreatRate, asa_key='threat-detection rate ' + rate_type, rate_type = rate_type))

    @staticmethod
    def to_camel_case(rate):
        ''' Convert rate type name that contains hyphens to Camel case , i.e. acl-drop to AclDrop'''
        words = rate.split('-')
        new_words = []
        for word in words:
            new_words.append(word[0].upper() + word[1:])
        return "".join(new_words)



    def query_basic_threat(self):
        ''' Get all threat rate instances on the device.
        These are used  to optimize the CLI so that no unnecessary CLIs are generated by audit function
        '''

        if not self.get_top().get_device(): #skip if there is no device attribute
            return

        BasicThreatDetection.rates = {}

        query_cmd = 'show run all threat-detection'
        res = self.query_asa(query_cmd)

        if not res or not len(res):
            return

        lines = res.split('\n')

        for cli in lines:
            if cli.startswith('threat-detection rate '):
                values = util.normalize_param_dict(BasicThreatRate.parse_rates(cli))
                rates_str =  BasicThreatRate.get_rates_str(values)
                BasicThreatDetection.rates[rates_str] = ''


    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        self.audit = self.is_audit()
        if self.audit:
            self.query_basic_threat()
        super(BasicThreatDetection, self).ifc2asa(no_asa_cfg_stack, asa_cfg_list)



    @classmethod
    def rate_exists(cls, rate):
        ''' Check if rate already exists'''
        return rate in BasicThreatDetection.rates

    def __repr__(self):
        return "Basic Threat Detection"

    def is_audit(self):

        ''' Check if it is audit '''
        if not self.get_top().delta_ifc_cfg_value:
            return False

        return self.get_top().delta_ifc_cfg_value.get('state') != State.NOCHANGE

class BasicThreatRateList(DMList):
    ''' Threat list '''

    def __init__(self, name, child_class, asa_key='', rate_type = ''):
        '''
        @param self: DMList instance
            this class instance
        @param name: str
            the key for this configuration from the device specification file.
        @param child_class: class
            the type of elements in the list
        @param rate_type: string
            the type of rate
        '''
        DMList.__init__(self, name, child_class, asa_key)
        self.rate_type = rate_type

    def is_my_cli(self, cli):

        if isinstance(cli, str) and cli.startswith('threat-detection rate'):
            word = cli.split()
            if word[2] == self.rate_type:
                return True
        return False

class BasicThreatRate(SimpleType):
    ''' Class to handle CLI:
    threat-detection rate {acl-drop | bad-packet-drop | conn-limit-drop |
        dos-drop | fw-drop | icmp-drop | inspect-drop | interface-drop |
        syn-attack} rate-interval rate_interval average-rate
        av_rate burst-rate burst_rate '''

    def __init__(self, ifc_key='BasicThreatDetectionRateAclDrop', asa_key='threat-detection rate acl-drop'):
        '''Constructor '''

        self.rate_type = None
        self.extra_cli = None
        SimpleType.__init__(self, ifc_key, asa_key,
            asa_gen_template = 'threat-detection rate %(rate)s rate-interval %(rate_interval)s average-rate %(average_rate)s burst-rate %(burst_rate)s',
            response_parser = cli_interaction.ignore_warning_response_parser)


    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return

        self.rate_type = self.get_parent().rate_type
        self.asa_key = 'threat-detection rate ' + self.rate_type
        state = self.delta_ifc_cfg_value['state']

        self.extra_cli = None
        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            config['rate'] = self.rate_type
            if not config.get('rate_status'):
                config['rate_status'] = 'enable'
            cli = self.create_cli(config, state)
            if not cli:
                return


            if self.extra_cli:
                no_asa_cfg_stack.append(CLIInteraction(self.extra_cli, response_parser=self.ignore_response_parser))
                asa_cfg_list.append(CLIInteraction(cli))
            else:
                if cli.startswith('no '):
                    no_cli_cur = None
                    if len(no_asa_cfg_stack):
                        no_cli_cur = no_asa_cfg_stack[len(no_asa_cfg_stack) - 1].command
                    if cli != no_cli_cur:
                        no_asa_cfg_stack.append(CLIInteraction(cli, response_parser=self.ignore_response_parser))
                else:
                    asa_cfg_list.append(CLIInteraction(cli))

    def get_cli(self):
        '''Generate the CLI for this 'rate' config.
        '''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])

        if not self.rate_type:
            self.rate_type = self.get_parent().rate_type
        return self.create_cli(config, self.get_action())


    def create_cli(self, config, state):
        ''' Create CLI string '''
        if not config:
            return None
        if not isinstance(config, dict):
            return None
        self.extra_cli = None
        if not config.get('rate', None):
            config['rate'] = self.rate_type
        rates_str = self.get_rates_str(config)
        if state == State.DESTROY:
            if self.check_audit_exist(rates_str, True):
                return 'no ' + self.asa_gen_template % config
            else:
                return None
        status = config.get('rate_status')

        if status and status.startswith('disable'):
            if self.check_audit_exist(rates_str, True):
                return 'no ' + self.asa_gen_template % config
        else:
            if not self.check_audit_exist(rates_str, False):
                return self.handle_rate_limit(config)
        return None

    @staticmethod   
    def ignore_response_parser(response):
        'Ignores some response, otherwise returns original'
        msg1 = 'ERROR: no such rate'
        return None if not response or response.find(msg1) >= 0 else response

    def handle_rate_limit(self, config):
        ''' Handle the ASA rate limit of 3 for audit
        ASA allows No more than 3 rates per type
        Remove an existing rate before adding new one
        '''

        found = self.count_rates_for_type()

        if found[0] >= 3:
            rates = found[1].split('|')
            ncfg = {'rate': rates[0], 'rate_interval': str(rates[1]), 'average_rate': str(rates[2]), 'burst_rate': str(rates[3]) }
            self.extra_cli = 'no ' + (self.asa_gen_template % ncfg)

        return self.asa_gen_template % config


    def count_rates_for_type(self):
        ''' Count rates of this type '''
        cnt = 0
        found_key = None
        for key, value  in self.get_parent().parent.rates.iteritems():
            if key.startswith(self.rate_type):
                cnt += 1
                found_key = key
        return (cnt, found_key)

    def parse_multi_parameter_cli(self, cli, asa_gen_template = None):
        ''' Parse parameters '''

        if cli.startswith('no '):
            status = 'disable'
            result = self.parse_rates(cli[3:])
        else:
            status = 'enable'
            result = self.parse_rates(cli)

        result[(Type.PARAM, 'rate_status', '')] = {'state': State.NOCHANGE, 'value': status}
        values = util.normalize_param_dict(result)
        self.rate_type = values['rate']
        return result



    @staticmethod
    def parse_rates(cli):
        ''' Parse the 3 rates
        threat-detection rate {acl-drop | bad-packet-drop | conn-limit-drop |
        dos-drop | fw-drop | icmp-drop | inspect-drop | interface-drop |
        scanning-threat | syn-attack} rate-interval rate_interval average-rate
        avg_rate burst-rate burst_rate
        '''
        data = cli.split()
        result = {}
        result[(Type.PARAM, 'rate_status', '')] = {'state': State.NOCHANGE, 'value': 'enable'}
        result[(Type.PARAM, 'rate', '')] = {'state': State.NOCHANGE, 'value': data[2]}
        result[(Type.PARAM, 'rate_interval', '')] = {'state': State.NOCHANGE, 'value': data[4]}
        result[(Type.PARAM, 'average_rate', '')] = {'state': State.NOCHANGE, 'value': data[6]}
        result[(Type.PARAM, 'burst_rate', '')] = {'state': State.NOCHANGE, 'value': data[8]}

        return result


    @staticmethod
    def get_rates_str(values):
        ''' Get 3 rates in a string '''
        return values['rate'] +'|' + str(values['rate_interval']) + '|' + str(values['average_rate']) + '|' + str(values['burst_rate'])

    def check_audit_exist(self, rates, flag):
        ''' Check existence for audit '''
        if self.parent.parent.audit:
            return BasicThreatDetection.rate_exists(rates)
        return flag

class SimpleBasicThreat(SimpleType):
    ''' Translator for the type of CLI that turns on/off basic threat
    threat-detection basic-threat
    '''
    def __init__(self, ifc_key, asa_key, on_value, response_parser):
        '''
        @param on_value: str
            The value in the dictionary to turn on the feature, e.g. 'enable'
        '''
        SimpleType.__init__(self, ifc_key, asa_key)
        self.on_value = on_value
        self.response_parser = response_parser

    def get_cli(self):
        '''Override get_cli'''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])

        if not config:
            return ''
        if str(config).startswith('disable'):
            return 'no ' + self.asa_key

        return self.asa_key

    def parse_cli(self, cli):
        '''Override parse_cli'''
        if cli.endswith('basic-threat'):
            return 'disable' if cli.startswith('no ') else self.on_value
        return cli

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.endswith('threat-detection basic-threat')
