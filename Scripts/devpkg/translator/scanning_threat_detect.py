'''
Created on Aug 27, 2013

@author: tsnguyen
'''


from translator.base.simpletype import SimpleType
import utils.util as util
from translator.base.dmobject import DMObject
from translator.base.dmlist import DMList
from translator.state_type import Type, State
from asaio.cli_interaction import CLIInteraction

class ScanningThreatDetection(DMObject):
    '''
    Scanning Threat Detection
    Supports the following CLI:

    threat-detection scanning-threat [shun
        [except {ip-address ip_address mask | object-group network_object_group_id}]]
    threat-detection scanning-threat shun duration seconds
    threat-detection rate scanning-threat
        rate-interval rate_interval average-rate av_rate burst-rate burst_rate
    '''

    THREAT_DETECTION_SCANNING = "threat-detection scanning-threat"
    THREAT_DETECTION_SCANNING_SHUN = "threat-detection scanning-threat shun"
    THREAT_DETECTION_SCANNING_RATE = "threat-detection rate scanning-threat"

    rates = {}
    #shun_except_list = {}

    def __init__(self):
        '''
        Constructor
        '''


        DMObject.__init__(self, ScanningThreatDetection.__name__)

        self.register_child(SimpleScanning('scanning_threat', self.THREAT_DETECTION_SCANNING))
        self.register_child(SimpleShun('shun_status', self.THREAT_DETECTION_SCANNING_SHUN))
        rate_translator = DMList('ScanningThreatRate', ScanningThreatRate, asa_key=self.THREAT_DETECTION_SCANNING_RATE)
        self.register_child(rate_translator)
        rate_translator = DMList('ScanningThreatShunExceptIP', ShunExceptIP, asa_key=self.THREAT_DETECTION_SCANNING_SHUN + " except ip-address")
        self.register_child(rate_translator)
        rate_translator = DMList('ScanningThreatShunExceptObject', ShunExceptObject, asa_key=self.THREAT_DETECTION_SCANNING_SHUN + " except object-group")
        self.register_child(rate_translator)

        self.register_child(ShunDuration('ScanningThreatShunDuration', self.THREAT_DETECTION_SCANNING_SHUN + " duration"))



    def query_scanning_threat(self):
        ''' Get all scanning threat rate instances on the device.
        These are used  to optimize the CLI so that no unnecessary CLIs are generated by audit function
        '''

        if not self.get_top().get_device(): #skip if there is no device attribute
            return

        ScanningThreatDetection.rates = {}

        query_cmd = 'show run threat-detection | grep scanning-threat'
        res = self.query_asa(query_cmd)

        if not res or not len(res):
            return

        lines = res.split('\n')
        for cli in lines:
            if cli.startswith('threat-detection scanning-threat shun except ip-address'):
                values = util.normalize_param_dict(ShunExceptIP.parse_shun_except(cli))
                ScanningThreatDetection.rates[ShunExceptIP.get_shun_str(values)] = ''
            elif cli.startswith('threat-detection scanning-threat shun except object-group'):
                values = util.normalize_param_dict(ShunExceptObject.parse_shun_except(cli))
                ScanningThreatDetection.rates[ShunExceptObject.get_shun_str(values)] = ''
            elif cli.startswith('threat-detection scanning-threat shun duration'):
                values = util.normalize_param_dict(ShunDuration.parse_shun_duration(cli))
                ScanningThreatDetection.rates[ShunDuration.get_duration_str(values)] = ''
            elif cli.startswith('threat-detection rate scanning-threat'):
                values = util.normalize_param_dict(ScanningThreatRate.parse_rates(cli))
                ScanningThreatDetection.rates[ScanningThreatRate.get_rates_str(values)] = ''




    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''

        self.query_scanning_threat()
        super(ScanningThreatDetection, self).ifc2asa(no_asa_cfg_stack, asa_cfg_list)


    def is_audit(self):

        ''' Check if it is audit '''
        if not self.get_top().delta_ifc_cfg_value:
            return False

        return self.get_top().delta_ifc_cfg_value.get('state') != State.NOCHANGE

    def __repr__(self):
        return "Scanning Threat Detection"

    @classmethod
    def rate_exists(cls, rate):
        ''' Check rate existence in config '''
        return rate in cls.rates



    @staticmethod
    def ignore_msg_response_parser(response):
        'Ignores some response, otherwise returns original'
        msgs = ["already configured", "no such rate", "Can not remove", "already in", "not configured", "not in"]

        if response:
            for msg in msgs:
                if msg in response:
                    return None
            return response
        else:
            return None

class SimpleScanning(SimpleType):
    ''' Class to support CLI
    threat-detection scanning-threat
    '''

    def __init__(self, name, asa_key):
        '''Constructor'''

        SimpleType.__init__(self, name, asa_key,
            response_parser = ScanningThreatDetection.ignore_msg_response_parser)

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']


        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])

            cli = self.create_cli(config, state)
            if len(cli) > 0:
                if cli.startswith('no '):
                    no_asa_cfg_stack.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))

                else:
                    asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))


    def create_cli(self, config, state):
        ''' Create CLI string '''

        if config:
            if str(config).startswith('disable') or str(config).startswith('enable'):
                if state == State.DESTROY:
                    return 'no ' + ScanningThreatDetection.THREAT_DETECTION_SCANNING
                if str(config).startswith('disable'):
                    return 'no ' + ScanningThreatDetection.THREAT_DETECTION_SCANNING
                return ScanningThreatDetection.THREAT_DETECTION_SCANNING
        return ''

    def get_cli(self):
        '''Generate the CLI for this config.
        '''
        assert self.has_ifc_delta_cfg()
        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())


    def parse_cli(self, cli):
        '''Override
        '''

        if cli.endswith(ScanningThreatDetection.THREAT_DETECTION_SCANNING):
            return 'disable' if cli.startswith('no ') else 'enable'
        return SimpleType.parse_cli(self, cli)

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.endswith(ScanningThreatDetection.THREAT_DETECTION_SCANNING)

class SimpleShun(SimpleType):
    ''' Class to support CLI
    threat-detection scanning-threat shun

    '''
    def __init__(self, name, asa_key):
        '''Constructor'''

        SimpleType.__init__(self, name, asa_key,
            response_parser = ScanningThreatDetection.ignore_msg_response_parser)

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']
        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if cli.startswith('no '):
                no_asa_cfg_stack.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
            else:
                asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))

    def create_cli(self, config, state):
        ''' Create CLI string '''
        if state == State.DESTROY:
            return 'no ' + ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN
        if not config:
            return ''
        if isinstance(config, dict):
            return ''

        if str(config).startswith('disable'):
            return 'no ' + ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN
        elif str(config).startswith('enable'):
            return ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN

        return ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN

    def get_cli(self):
        '''Generate the CLI for this 'shun' config.
        '''
        assert self.has_ifc_delta_cfg()
        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())


    def parse_cli(self, cli):
        '''Override
        '''

        if cli.endswith(ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN):
            return 'disable' if cli.startswith('no ') else 'enable'

        return SimpleType.parse_cli(self, cli)

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.endswith(ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN)

class ShunDuration(SimpleType):
    ''' Class to support CLI
    threat-detection scanning-threat shun duration [time]
    '''

    def __init__(self, name, asa_key):
        '''Constructor'''

        SimpleType.__init__(self, name, asa_key,
            asa_gen_template = ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN + ' duration %(duration)s',
            response_parser = ScanningThreatDetection.ignore_msg_response_parser)

    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return
        self.get_parent().query_scanning_threat()
        state = self.delta_ifc_cfg_value['state']
        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if not cli or not len(cli):
                return
            if cli.startswith('no '):
                no_asa_cfg_stack.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
            else:
                asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))


    def create_cli(self, config, state):
        ''' Create CLI string '''
        if not config:
            return None
        if not isinstance(config, dict):
            return None

        if not 'duration' in config:
            return ''

        shun = self.get_duration_str(config)
        if state == State.DESTROY:
            if self.check_audit_exist(shun, True):
                return 'no ' + self.asa_gen_template % config
            return ''
        status = config.get('status')

        if status and status.startswith('disable'):
            if self.check_audit_exist(shun, True):
                return 'no ' + self.asa_gen_template % config
            return ''
        if not self.check_audit_exist(shun, False):
            return self.asa_gen_template % config
        return ''

    def get_cli(self):
        '''Generate the CLI for this 'shun duration' config.
        '''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())

    def parse_cli(self, cli):
        '''Override
        '''
        result = {}
        if cli.startswith(ScanningThreatDetection.THREAT_DETECTION_SCANNING_SHUN + ' duration'):
            result = self.parse_shun_duration(cli)
            result = {(Type.PARAM, 'status', '') : {'state': State.NOCHANGE, 'value': 'enable'}}

        return result

    def check_audit_exist(self, shun, flag):
        ''' Check existence for audit '''

        if self.parent.is_audit():
            return ScanningThreatDetection.rate_exists(shun)
        return flag

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.find("scanning-threat shun duration") >= 0
    
    @staticmethod
    def parse_shun_duration(cli):
        ''' Parse shun duration CLI '''
        data = cli.split()
        result = {}
        if len(data) == 5:
            result[(Type.PARAM, 'status', '')] = {'state': State.NOCHANGE, 'value': 'enable'}
            result[(Type.PARAM, 'duration', '')] = {'state': State.NOCHANGE, 'value': data[4]}

        return result

    @staticmethod
    def get_duration_str(values):
        ''' Get shun duration string '''
        return 'duration-' + values['duration']

class ShunExceptIP(SimpleType):
    ''' Class to support CLI
    threat-detection scanning-threat [shun
        [except ip-address ip_address mask]]
    '''

    def __init__(self, ifc_key="ShunExceptIP", asa_key="threat-detection scanning-threat shun except ip-address"):
        '''Constructor'''

        asa_gen_template = asa_key + " %(except_ip)s %(except_mask)s"
        SimpleType.__init__(self, ifc_key = ifc_key, asa_key = asa_key, asa_gen_template = asa_gen_template,
            response_parser = ScanningThreatDetection.ignore_msg_response_parser)


    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''

        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']
        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)
            if not cli or not len(cli):
                return

            if cli.startswith('no '):
                no_asa_cfg_stack.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
            else:
                asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))


    def create_cli(self, config, state):
        ''' Create CLI string '''
        if not config:
            if state == State.DESTROY:
                return 'no threat-detection scanning-threat shun'
            return ''

        if not isinstance(config, dict):
            return None
        shun = self.get_shun_str(config)

        if state == State.DESTROY:
            if self.check_audit_exist(shun, True):
                return 'no ' + self.asa_gen_template % config
            else:
                return ''

        status = config.get('status')

        if status and status.startswith('disable'):
            if self.check_audit_exist(shun, True):
                return 'no ' + self.asa_gen_template % config
            else:
                return ''
        if not self.check_audit_exist(shun, False):
            return self.asa_gen_template % config
        return ''

    def check_audit_exist(self, shun, flag):
        ''' Check existence for audit '''

        if self.parent.parent.is_audit():
            return ScanningThreatDetection.rate_exists(shun)
        return flag

    def get_cli(self):
        '''Generate the CLI for this 'shun except' config.
        '''
        assert self.has_ifc_delta_cfg()
        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())

    def parse_multi_parameter_cli(self, cli, alternate_asa_gen_template = None):
        ''' Parse parameters '''

        result = self.parse_shun_except(cli)
        status = 'enable'
        if cli.startswith('no '):
            status = 'disable'

        result[(Type.PARAM, 'status', 'status')] = {'state': State.NOCHANGE, 'value': status}
        return result

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.find("scanning-threat shun except ip-address") >= 0
    
    @staticmethod
    def parse_shun_except(cli):
        ''' Parse CLI '''
        data = cli.split()
        result = {}
        if len(data) == 7:
            result[(Type.PARAM, 'status', '')] = {'state': State.NOCHANGE, 'value': 'enable'}
            result[(Type.PARAM, 'except_ip', '')] = {'state': State.NOCHANGE, 'value': data[5]}
            result[(Type.PARAM, 'except_mask', '')] = {'state': State.NOCHANGE, 'value': data[6]}

        return result

    @staticmethod
    def get_shun_str(values):
        ''' Get shun exception string '''
        if 'except_ip' in values and 'except_mask' in values:
            return 'shun-ip-' + values['except_ip'] + '-' + values['except_mask']
        else:
            return ''

class ShunExceptObject(SimpleType):
    ''' Class to support CLI
    threat-detection scanning-threat [shun
        [except object-group network_object_group_id]]
    '''

    def __init__(self, ifc_key="ShunExceptObject", asa_key="threat-detection scanning-threat shun except object-group"):
        '''Constructor'''

        asa_gen_template = asa_key + " %(except_object_group)s"
        SimpleType.__init__(self, ifc_key = ifc_key, asa_key = asa_key, asa_gen_template = asa_gen_template,
            response_parser = ScanningThreatDetection.ignore_msg_response_parser)


    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''


        if not self.has_ifc_delta_cfg():
            return
        state = self.delta_ifc_cfg_value['state']
        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
            cli = self.create_cli(config, state)

            if not cli or not len(cli):
                return

            if cli.startswith('no '):
                no_asa_cfg_stack.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
            else:
                asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.find("scanning-threat shun except object-group") >= 0
    
    def create_cli(self, config, state):
        ''' Create CLI string '''
        if not config:
            if state == State.DESTROY:
                return 'no threat-detection scanning-threat shun'
            return ''

        if not isinstance(config, dict):
            return ''
        shun = self.get_shun_str(config)

        if state == State.DESTROY:
            if self.check_audit_exist(shun, True):
                return 'no ' + self.asa_gen_template % config
            else:
                return ''

        status = config.get('status')

        if status and status.startswith('disable'):
            if self.check_audit_exist(shun, True):
                return 'no ' + self.asa_gen_template % config
            else:
                return ''
        if not self.check_audit_exist(shun, False):
            return self.asa_gen_template % config
        return ''

    def check_audit_exist(self, shun, flag):
        ''' Check existence for audit '''

        if self.parent.parent.is_audit():
            return ScanningThreatDetection.rate_exists(shun)
        return flag

    def get_cli(self):
        '''Generate the CLI for this 'shun except' config.
        '''
        assert self.has_ifc_delta_cfg()
        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())

    def parse_multi_parameter_cli(self, cli, alternate_asa_gen_template = None):
        ''' Parse parameters '''

        result = self.parse_shun_except(cli)
        status = 'enable'
        if cli.startswith('no '):
            status = 'disable'

        result[(Type.PARAM, 'status', 'status')] = {'state': State.NOCHANGE, 'value': status}

        return result

    @staticmethod
    def parse_shun_except(cli):
        ''' Parse CLI '''
        data = cli.split()
        result = {}
        if len(data) == 6:
            result[(Type.PARAM, 'status', '')] = {'state': State.NOCHANGE, 'value': 'enable'}
            result[(Type.PARAM, 'except_object_group', '')] = {'state': State.NOCHANGE, 'value': data[5]}

        return result

    @staticmethod
    def get_shun_str(values):
        ''' Get shun exception string '''
        if 'except_object_group' in values:
            return 'shun-obj-' + values['except_object_group']
        else:
            return ''

class ScanningThreatRate(SimpleType):
    ''' Class to support CLI
    threat-detection rate scanning-threat
        rate-interval rate_interval average-rate av_rate burst-rate burst_rate
    '''

    def __init__(self, ifc_key='ScanningThreatRate', asa_key = ScanningThreatDetection.THREAT_DETECTION_SCANNING_RATE):
        '''Constructor'''
        self.extra_cli = None

        SimpleType.__init__(self, ifc_key = ifc_key, asa_key = asa_key,
            asa_gen_template = ScanningThreatDetection.THREAT_DETECTION_SCANNING_RATE + ' rate-interval %(rate_interval)s average-rate %(average_rate)s burst-rate %(burst_rate)s',
            response_parser = ScanningThreatDetection.ignore_msg_response_parser)


    def ifc2asa(self, no_asa_cfg_stack, asa_cfg_list):
        ''' Translate IFC config to ASA config  '''
        if not self.has_ifc_delta_cfg():
            return

        state = self.delta_ifc_cfg_value['state']

        if state != State.NOCHANGE:
            config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])

            cli = self.create_cli(config, state)
            if not len(cli):
                return
            if self.extra_cli:
                no_asa_cfg_stack.append(CLIInteraction(self.extra_cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
                asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
            else:
                if cli.startswith('no '):
                    no_asa_cfg_stack.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))
                else:
                    asa_cfg_list.append(CLIInteraction(cli, response_parser = ScanningThreatDetection.ignore_msg_response_parser))



    def create_cli(self, config, state):
        ''' Create CLI string '''
        if not config:
            return ''
        if not isinstance(config, dict):
            return ''
        self.extra_cli = None

        rates = self.get_rates_str(config)
        if state == State.DESTROY:
            if self.check_audit_exist(rates, True):
                return 'no ' + self.asa_gen_template % config
            else:
                return ''

        status = config.get('status')

        cli = ''
        if status and status.startswith('disable'):
            if self.check_audit_exist(rates, True):
                cli = 'no ' + self.asa_gen_template % config
            else:
                return ''
        else:
            if not self.check_audit_exist(rates, False):
                if len(self.get_parent().parent.rates) < 3: # ASA allows No more than 3 rates
                    cli = self.asa_gen_template % config
                else:
                    for key, value  in self.get_parent().parent.rates.iteritems():
                        if key.startswith('rates'):        # Remove an existing rate before adding new one
                            rates = key.split('-')
                            if len(rates) == 4:
                                ncfg = {'rate_interval': str(rates[1]), 'average_rate': str(rates[2]), 'burst_rate': str(rates[3]) }
                                self.extra_cli = 'no ' + (self.asa_gen_template % ncfg)
                                cli = self.asa_gen_template % config
            else:
                return ''

        return cli

    def is_the_same_cli(self, cli):
        '@return if the given CLI is the same as the one represented by me'
       
        cli2 = self.get_cli()
        return self.parse_cli(cli) == self.parse_cli(cli2) if cli2 else False
        
        
    
    def get_cli(self):
        '''Generate the CLI for this 'rate' config.
        '''
        assert self.has_ifc_delta_cfg()

        config = util.normalize_param_dict(self.delta_ifc_cfg_value['value'])
        return self.create_cli(config, self.get_action())

    def parse_multi_parameter_cli(self, cli, alternate_asa_gen_template = None):
        ''' Parse parameters '''
        if cli.find(ScanningThreatDetection.THREAT_DETECTION_SCANNING_RATE) >= 0:
            return self.parse_rates(cli)
        return super(ScanningThreatRate, self).parse_multi_parameter_cli(cli)


    def check_audit_exist(self, rates, flag):
        ''' Check existence for audit '''
        if self.parent.parent.is_audit():
            return ScanningThreatDetection.rate_exists(rates)
        return flag

    def is_my_cli(self, cli):
        return isinstance(cli, str) and cli.find(ScanningThreatDetection.THREAT_DETECTION_SCANNING_RATE) >= 0
    
    @staticmethod
    def parse_rates(cli):
        ''' Parse the 3 rates '''
       
        data = cli.split()
        result = {}
        offset = 4 # rate data start at here for normal CLI 
        if data[0] == 'no':
            result[(Type.PARAM, 'status', '')] = {'state': State.NOCHANGE, 'value': 'disable'}
            offset += 1 
        else:
            result[(Type.PARAM, 'status', '')] = {'state': State.NOCHANGE, 'value': 'enable'}
        result[(Type.PARAM, 'rate_interval', '')] = {'state': State.NOCHANGE, 'value': data[offset]}
        result[(Type.PARAM, 'average_rate', '')] = {'state': State.NOCHANGE, 'value': data[offset + 2]}
        result[(Type.PARAM, 'burst_rate', '')] = {'state': State.NOCHANGE, 'value': data[offset + 4]}

        return result

    @staticmethod
    def get_rates_str(values):
        ''' Get 3 rates as string '''
        return 'rates-' + str(values['rate_interval']) + '-' + str(values['average_rate']) + '-' + str(values['burst_rate'])

